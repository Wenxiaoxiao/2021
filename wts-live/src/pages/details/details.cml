<template>
  <view class="apps">
    <block c-if="{{classInfo.startStatus == 0}}">
      <!-- 课程未开始 -->
      <view></view>
      <view class="class-info">
          <image class="banner-img" src="{{ classInfo.banner || imgSrc }}" style="height:422cpx;"></image>
          <text class="class-title">{{classInfo.name}}</text>
          <text class="class-time">直播时间：{{classInfo.startTimeStr}}</text>
      </view>
      <view class="class-detail">
        <text class="sub-title">课程简介</text>
        <text c-if="{{classInfo.introduce.length}}" class="class-detail-msg">{{classInfo.introduce}}</text>
        <my-richtext class="class-detail-desc" textMsg="{{classInfo.description}}"></my-richtext>
        <block c-if="{{classInfo.subscribeStatus == 1}}">
            <!-- 已预约 -->
            <button class="live-btn btn-signed" btn-style="border-radius: 8cpx;background: #e1e1e1;" text-style="font-size:34cpx;color: #333333;" text="已报名"></button>
        </block>
        <block c-else>
          <!-- 未预约 -->
          <origin-form report-submit="{{ true }}" bindsubmit="signUpEvent" style="width:0;">
              <origin-button form-type="submit" plain="{{ true }}" class="live-btn btn-order">预约直播</origin-button>
          </origin-form>
          <!-- <button class="live-btn btn-order" btn-style="background: #ffa200;border-radius: 8cpx;" text-style="font-size:34cpx;" text="预约直播" c-bind:click="signUpEvent"></button> -->
        </block>
      </view>
    </block>
    <block c-else-if="{{classInfo.startStatus == 1}}">
      <!-- 直播中 -->
      <!-- 视频层  -->
      <view ref="videoLayer" class="videoLayer">
        <image c-show='{{isHiddenVideo}}' src="{{roomIntroUrl}}"/>
        <!-- <my-live class="mylive" c-bind:closeChat="closeChat" is-hidden-video="{{isHiddenVideo}}" video-src="{{videoSrc}}"></my-live>-->
        <video class="mylive" cstyle="width:100%;height:422cpx;" autoplay="{{true}}" controls="{{true}}" src="{{videoSrc}}"></video> 
      </view>
      <!-- 聊天层 -->
      <view class="chat-box" c-show="{{!chatStatus}}">
          <scroller id="chat-id" class="chat-inner" height="{{chatHeight}}" scroll-top="{{scrollHeight}}">
            <block c-for="{{messages}}" c-for-index="idx" c-for-item="message">
                <block c-if="{{message.messageType == 1 && message.citeSenderNickName}}">
                  <view class="chat-tpl-02" id="message{{idx + 1}}">
                      <view class="chat-tpl-01">
                        <text class="t-date">{{msgTime[idx]}}</text>
                        <image src="{{message.senderAvatarUrl}}" />
                        <text class="t-teachet">{{message.senderNickName}}</text>
                        <text class="t-dui">对</text>
                        <image src="{{message.citeAvatarUrl}}" />
                        <text class="t-name">{{message.citeSenderNickName}}</text>
                      </view>
                      <view style="flex-direction:row;">
                        <text class="t-ct">{{msgStr[idx]}}</text>
                      </view>
                  </view>
                </block>
                <block c-else>
                    <view class="chat-tpl-01" id="message{{idx+1}}">
                        <text class="t-date">{{msgTime[idx]}}</text>
                        <image src="{{message.senderAvatarUrl}}" />
                        <text class="t-name">{{message.senderNickName}}</text>
                        <text class="t-ct">{{msgStr[idx]}}</text>
                    </view>
                </block>
            </block>
          </scroller>
          <my-input class="my-input" c-bind:sendMsg="sendMessageEvent" c-bind:hasUserAva="getAvatarUrl"></my-input>
      </view>
    </block>
    <!-- <block c-else-if="{{classInfo.startStatus == 2}}">
      <view class="sub-right over">
        <text>已结束</text>
      </view>
    </block> -->
    <block c-else>
      <!-- 暂无课程 -->
      <!-- <view style="height: 100%;background: #f2f2f2;"> -->
      <view>
        <image src="{{noClassImg}}" style="width: 750cpx;height: 1369cpx;"></image>
      </view>
    </block>
  </view>
</template>

<script>

import api from '../../utils/api'
import util from '../../utils/util'
import cml from 'chameleon-api'
import myApi from '../../components/tools/tools.interface'
import lifeCycle from '../../components/lifeCycle/lifeCycle.interface'
import App from '../../app/app'
import socket from '../../utils/socket'

var timer;

class Details   {

  data = {
    classInfo: {},
    classId: 0,
    loading: true,
    userInfo: {},
    avatarUrl: "",
    imgSrc: require("../../assets/images/liveBanner.jpg"),
    noClassImg: '',
    isHiddenVideo: false,
    videoSrc: "",
    roomIntroUrl:"",
    messages:"",
    videoHeight:0,
    subHeight: 0,
    chatHeight: 0,
    scrollHeight: 0,
    subject: null,
    isHiddenControls: true,
    liveMessage: [],
    messages: [],
    msg: '',
    msgTime: [],
    msgStr: [],
    scrollTop: 0,
    toLast: '',
    userInfo: {},
    hasUserInfo: false,
    isFull: false,
    roomIntroUrl: '',
    chatStatus: false,
    eventLock: true,
    inputBottom: 'bottom: 0px'
  }

  computed = {
  }

  watch  = {
  }

  methods = {
    getAvatarUrl(e) {
      // 获取缓存的用户信息和头像
      var userInfo = Object.assign({}, myApi.getStorageSync('loginInfo'), {avatarUrl: myApi.getStorageSync('avatarUrl')});
      this.userInfo= userInfo;
      this.userInfo.avatarUrl= e.detail.avatarUrl;
    },
    sendMessageEvent(e){
      // 最近登陆过就添加用户信息
      // if(JSON.stringify(this.userInfo)=="{}") {
      //   var userInfo = Object.assign({}, myApi.getStorageSync('loginInfo'), {avatarUrl: myApi.getStorageSync('avatarUrl')});
      //   this.userInfo= userInfo;
      // }
      var self = this;
      console.log(self.userInfo);
      this.msg= e.detail.chatMsg;
      setTimeout(function() {
        self.scrollHeight+= Math.ceil(e.detail.chatMsg.length/12)*48+20;
      },500)
      //声明点击锁
      myApi.showLoading('发送成功');
      var msg = this.msg || '';
      if(msg == '')
      {
        myApi.showToast({
          title: '请输入您要发送的消息！',
          icon: 'none',
          duration: 2000
        });
        return;
      }
      api.newSendMessage({
        messageContent: msg,
        userico: this.userInfo.avatarUrl
      }, function(){
        var newMsg = {
            "messageId": new Date().getTime(),
            "messageType": "2",
            "content": '{"txt":"'+msg+'"}',
            "senderId": self.userInfo.id,
            "senderNickName": self.userInfo.nickName,
            "senderAvatarUrl": self.userInfo.avatarUrl,
            "sentTime": util.formatTime(new Date()),
            "minLevel": "0",
            "citeContent": "",
            "citeSenderId": "",
            "citeSenderNickName": "",
            "citeAvatarUrl": "",
            "citeMessageType": "",
            "isBest": "0"
        };
      console.log(self.userInfo);
        var messages = self.messages.concat(newMsg);
        self.msgStr.push(self.strToJson(newMsg.content).txt);
        self.msgTime.push(self.isToday(newMsg.sentTime));

        self.messages= messages;
        self.msg= '';
        self.toLast= `message${messages.length}`;
        self.eventLock= false;

        myApi.hideLoading();
      });
      
      setTimeout(function () {
        myApi.hideLoading()
      }, 2000)
    },
    // 注册
    signUpEvent(e){
      var _self = this;
      var courseId = this.classInfo.id;
      var formid = e.detail.formId;
      api.subscribeClass({
        courseId,
        formid
      }, function(data){
        myApi.showToast({
          title: data.message,
          icon: 'none',
          duration: 2000
        })
        _self.queryClassDetail();
      });
    },
    queryClassDetail(){
      var _self = this;
      api.getClassDetail({
        id: _self.classId
      }, function(data){
        // 判断是否有直播数据
        if(JSON.stringify(data)=="{}") {
          _self.noClassImg= require("../../assets/images/noclass.jpg");
        }else {
          data.startTimeStr= _self.getFullTime(data.startTime);
        }
        _self.classInfo= data;
        _self.loading= false;
        //创建一个定时任务监听是否开课
        if(data.startStatus == 1)
        {
          _self.listenStatus(data.endTime - data.currentDate);
        }
        else if(data.startStatus == 0)
        {
          _self.listenStatus(data.startTime - data.currentDate);
        }
      });
    },
    listenStatus(time){
      var _self = this;
      if(timer)
      {
        clearTimeout(timer);
      }
      timer = setTimeout(function(){
        console.log("----Countdown----");
        _self.queryClassDetail();
      }, time);
    },
    // 直播时websocket
    listenSocket(){
      var self = this;
      socket.init({
        userid: this.userInfo.id,
        username: this.userInfo.nickName
      }, function(stompClient){
        stompClient.subscribe('/room/1/roomMsg', function(message, headers) {
          console.log('chat:',JSON.parse(message.body).data);
          // 通知服务端收到消息
          message.ack();
          //回调给调用方
          var chat = JSON.parse(message.body).data;
          //如果就同一个用户，就过滤掉这条消息
          if(chat.senderId == self.userInfo.id) return;
          chat.sentTime = chat.sentTime.replace(/-/g, '/');
          self.msgTime.push(self.isToday(chat.sentTime));
          self.msgStr.push(self.strToJson(chat.content).txt);
          // 收到消息滚动
          setTimeout(function() {
            self.scrollHeight+= Math.ceil(self.msgStr[self.msgStr.length-1].length/12)*48+20;
          },500)

          var messages = self.messages.concat(chat);
          self.messages = messages;
          self.msg= '';
          self.toLast= `message${messages.length}`;
        });
        //上线通知
        stompClient.subscribe('/room/1/connect', function(message) {
          console.log('我上线了'); 
        });

        // 下线通知
        stompClient.subscribe('/room/1/disconnect', function(message) {
          console.log('我下线了'); 
        });

        //房间配置信息更新
        stompClient.subscribe('/room/1/roomConfig', function(message) {
          console.log('配置文件更新了'); 
          var msgObj = JSON.parse(message.body);
          var data = msgObj.data;
          var themeContent = JSON.parse(data.roomTheme.themeContent);

          if(data.isLock == 0)
          {
            self.videoSrc= data.videoUrl;
            self.isHiddenVideo= false;
          }
          else
          {
            self.isHiddenVideo= true;
            self.roomIntroUrl= themeContent.stopLockImg;
          }
        });
      });
    },
    closeChat() {
      console.log("closeChat")
    },
    add0(m) {
      return m < 10 ? '0' + m : m
    },
    getFullTime(timestamp) {
      var time = new Date(parseInt(timestamp));
      var year = time.getFullYear();
      var month = time.getMonth() + 1;
      var date = time.getDate();
      var hours = time.getHours();
      var minutes = time.getMinutes();
      var seconds = time.getSeconds();
      return this.add0(year)+'.'+this.add0(month)+'.'+this.add0(date)+' '+this.add0(hours) + ':' + this.add0(minutes);
    },
    getChatPos(e) {
      console.log(e);
      this.inputBottom= 'bottom: '+e.detail.inputBottom+'px';
    },
    getTime(timestamp) {
      var time = getDate(parseInt(timestamp) * 1000)
      // var year = time.getFullYear();
      var month = time.getMonth() + 1;
      var date = time.getDate();
      var hours = time.getHours();
      var minutes = time.getMinutes();
      var seconds = time.getSeconds();
      return this.add0(hours) + ':' + this.add0(minutes);
    },
    isToday(str){
      var d = new Date(str);
      var todaysDate = new Date();
      if(todaysDate.getTime() - d.getTime() < 86400000){
        return d.getHours() + ':' + this.add0(d.getMinutes()) + ':' + this.add0(d.getSeconds());
      } else {
        var mouth = d.getMonth() + 1;
        var day = d.getDate();
        return mouth + "月" + day;
      }
    },
    strToJson(str){
      return JSON.parse(str);
    },
    ...lifeCycle
  }
  beforeCreate(query) {
  }

  created(query) {
    var self = this;
    var userInfo = Object.assign({}, myApi.getStorageSync('loginInfo'), {avatarUrl: myApi.getStorageSync('avatarUrl')});
    setTimeout(function() {
      self.userInfo= userInfo;
    },1000);
    myApi.getWxCode(self.queryClassDetail.bind(this));

    // 页面高-tabnav-livePlayer-chatBox-自身padding
    this.chatHeight= this.scrollHeight= cml.px2cpx(myApi.getSystemInfoSync().windowHeight- cml.cpx2px(617));
    //初始化直播间播放信息
    api.getLiveInfo({
      roomId: 1
    }, function(data){
      var themeContent = JSON.parse(data.theme.themeContent);
      if(data.isLock == 0)
      { 
        self.videoSrc= data.videoUrl;
        self.isHiddenVideo= false;
      }
      else
      {
        self.isHiddenVideo= true;
        self.roomIntroUrl= themeContent.stopLockImg;
      }
      //加载推广弹出层
      console.log(data);
    });
    //初始化获取聊天信息
    api.getMessages({
      roomId: 1,
      direction: 'DOWN',
      count: 10
    }, function(data){
      //console.log(data);
      // this.messages
      var messages = data.map(item => {
        var sentTime = item.sentTime;
        item.sentTime = sentTime.replace(/-/g, '/');
        return item;
      });
      messages.map(function(item) {
        self.msgTime.push(self.isToday(item.sentTime));
        self.msgStr.push(self.strToJson(item.content).txt);
      })
      self.messages= messages;
      self.toLast= `message${data.length}`;
    });
  }

  beforeMount(query) {
    var _that= this;
    myApi.getStorage("loginInfo",function(res) {
      _that.userInfo= res.data;
      _that.listenSocket();
    })
  }

  onShow() {
  }

  mounted() {
  }

  onHide() {
  }

  beforeDestroy() {
    this.noClassImg= '';
  }

  destroyed() {
    socket.close();
    clearTimeout(timer);
  }
}

export default new Details();
</script>

<style>
  @import './details.less';
</style>

<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "my-live": "/src/components/myLive/myLive",
      "my-input": "/src/components/myInput/myInput",
      "my-richtext": "/src/components/myRichtext/myRichtext"
    }
  },
  "wx": {
    "navigationBarTitleText": "梧桐树保险课堂-cml",
    "backgroundTextStyle": "dark",
    "backgroundColor": "#E2E2E2"
  }
}
</script>
